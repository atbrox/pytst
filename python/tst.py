# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_tst', [dirname(__file__)])
        except ImportError:
            import _tst
            return _tst
        if fp is not None:
            try:
                _mod = imp.load_module('_tst', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _tst = swig_import_helper()
    del swig_import_helper
else:
    import _tst
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class TSTException(_object):
    """Proxy of C++ TSTException class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TSTException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TSTException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, char _message) -> TSTException"""
        this = _tst.new_TSTException(*args)
        try: self.this.append(this)
        except: self.this = this
    def what(self):
        """what(self) -> char"""
        return _tst.TSTException_what(self)

    __swig_destroy__ = _tst.delete_TSTException
    __del__ = lambda self : None;
TSTException_swigregister = _tst.TSTException_swigregister
TSTException_swigregister(TSTException)
cvar = _tst.cvar
TST_VERSION = cvar.TST_VERSION
UNDEFINED_INDEX = cvar.UNDEFINED_INDEX

class _TST(_object):
    """Proxy of C++ tst<(char,PythonReference,memory_storage<(char,PythonReference)>,ObjectSerializer,string_type)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _TST, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _TST, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> _TST"""
        this = _tst.new__TST()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tst.delete__TST
    __del__ = lambda self : None;
    def pack(self):
        """pack(self)"""
        return _tst._TST_pack(self)

    def walk(self, *args):
        """
        walk(self, _Filter filter, _Action to_perform) -> PythonReference
        walk(self, _Filter filter, _Action to_perform, string_type string) -> PythonReference
        """
        return _tst._TST_walk(self, *args)

    def close_match(self, *args):
        """
        close_match(self, string_type string, int maximum_distance, _Filter filter, 
            _Action to_perform) -> PythonReference
        """
        return _tst._TST_close_match(self, *args)

    def prefix_match(self, *args):
        """prefix_match(self, string_type string, _Filter filter, _Action to_perform) -> PythonReference"""
        return _tst._TST_prefix_match(self, *args)

    def match(self, *args):
        """match(self, string_type string, _Filter filter, _Action to_perform) -> PythonReference"""
        return _tst._TST_match(self, *args)

    def get(self, *args):
        """get(self, string_type string) -> PythonReference"""
        return _tst._TST_get(self, *args)

    def get_or_build(self, *args):
        """get_or_build(self, string_type string, _Filter factory) -> PythonReference"""
        return _tst._TST_get_or_build(self, *args)

    def put(self, *args):
        """put(self, string_type string, PythonReference data) -> PythonReference"""
        return _tst._TST_put(self, *args)

    def remove(self, *args):
        """remove(self, string_type string)"""
        return _tst._TST_remove(self, *args)

    def contains(self, *args):
        """contains(self, string_type string) -> bool"""
        return _tst._TST_contains(self, *args)

    def write(self, *args):
        """write(self, std::ostream file)"""
        return _tst._TST_write(self, *args)

    def read(self, *args):
        """read(self, std::istream file)"""
        return _tst._TST_read(self, *args)

    def iterator(self, *args):
        """
        iterator(self) -> _lexical_iterator_type
        iterator(self, string_type string) -> _lexical_iterator_type
        """
        return _tst._TST_iterator(self, *args)

    def close_match_iterator(self, *args):
        """close_match_iterator(self, string_type string, int distance) -> _close_match_iterator_type"""
        return _tst._TST_close_match_iterator(self, *args)

    def get_number_of_nodes(self):
        """get_number_of_nodes(self) -> int"""
        return _tst._TST_get_number_of_nodes(self)

    def get_default_value(self):
        """get_default_value(self) -> PythonReference"""
        return _tst._TST_get_default_value(self)

    def scan(self, *args):
        """scan(self, string_type string, _Action to_perform) -> PythonReference"""
        return _tst._TST_scan(self, *args)

    def scan_with_stop_chars(self, *args):
        """scan_with_stop_chars(self, string_type string, string_type stop_chars, _Action to_perform) -> PythonReference"""
        return _tst._TST_scan_with_stop_chars(self, *args)

_TST_swigregister = _tst._TST_swigregister
_TST_swigregister(_TST)

class _Action(_object):
    """Proxy of C++ tst_action<(char,PythonReference,string_type)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Action, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Action, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _tst.delete__Action
    __del__ = lambda self : None;
    def perform(self, *args):
        """perform(self, string_type string, int remaining_distance, PythonReference data)"""
        return _tst._Action_perform(self, *args)

    def result(self):
        """result(self) -> PythonReference"""
        return _tst._Action_result(self)

_Action_swigregister = _tst._Action_swigregister
_Action_swigregister(_Action)

class _Filter(_object):
    """Proxy of C++ tst_filter<(char,PythonReference,string_type)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _Filter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _Filter, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _tst.delete__Filter
    __del__ = lambda self : None;
    def perform(self, *args):
        """perform(self, string_type string, int remaining_distance, PythonReference data) -> PythonReference"""
        return _tst._Filter_perform(self, *args)

_Filter_swigregister = _tst._Filter_swigregister
_Filter_swigregister(_Filter)

class CallableAction(_Action):
    """Proxy of C++ CallableAction class"""
    __swig_setmethods__ = {}
    for _s in [_Action]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CallableAction, name, value)
    __swig_getmethods__ = {}
    for _s in [_Action]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CallableAction, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, PythonReference perform, PythonReference result) -> CallableAction"""
        this = _tst.new_CallableAction(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tst.delete_CallableAction
    __del__ = lambda self : None;
    def perform(self, *args):
        """perform(self, string_type string, int remaining_distance, PythonReference data)"""
        return _tst.CallableAction_perform(self, *args)

    def result(self):
        """result(self) -> PythonReference"""
        return _tst.CallableAction_result(self)

CallableAction_swigregister = _tst.CallableAction_swigregister
CallableAction_swigregister(CallableAction)

class CallableFilter(_Filter):
    """Proxy of C++ CallableFilter class"""
    __swig_setmethods__ = {}
    for _s in [_Filter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CallableFilter, name, value)
    __swig_getmethods__ = {}
    for _s in [_Filter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CallableFilter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, PythonReference _callable) -> CallableFilter"""
        this = _tst.new_CallableFilter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tst.delete_CallableFilter
    __del__ = lambda self : None;
    def perform(self, *args):
        """perform(self, string_type string, int remaining_distance, PythonReference data) -> PythonReference"""
        return _tst.CallableFilter_perform(self, *args)

CallableFilter_swigregister = _tst.CallableFilter_swigregister
CallableFilter_swigregister(CallableFilter)

class DictAction(_Action):
    """Proxy of C++ DictAction class"""
    __swig_setmethods__ = {}
    for _s in [_Action]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DictAction, name, value)
    __swig_getmethods__ = {}
    for _s in [_Action]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DictAction, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> DictAction"""
        this = _tst.new_DictAction()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tst.delete_DictAction
    __del__ = lambda self : None;
    def perform(self, *args):
        """perform(self, string_type string, int remaining_distance, PythonReference data)"""
        return _tst.DictAction_perform(self, *args)

    def result(self):
        """result(self) -> PythonReference"""
        return _tst.DictAction_result(self)

DictAction_swigregister = _tst.DictAction_swigregister
DictAction_swigregister(DictAction)

class ListAction(_Action):
    """Proxy of C++ ListAction class"""
    __swig_setmethods__ = {}
    for _s in [_Action]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListAction, name, value)
    __swig_getmethods__ = {}
    for _s in [_Action]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListAction, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> ListAction"""
        this = _tst.new_ListAction()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tst.delete_ListAction
    __del__ = lambda self : None;
    def perform(self, *args):
        """perform(self, string_type string, int remaining_distance, PythonReference data)"""
        return _tst.ListAction_perform(self, *args)

    def result(self):
        """result(self) -> PythonReference"""
        return _tst.ListAction_result(self)

ListAction_swigregister = _tst.ListAction_swigregister
ListAction_swigregister(ListAction)

class TupleListAction(_Action):
    """Proxy of C++ TupleListAction class"""
    __swig_setmethods__ = {}
    for _s in [_Action]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TupleListAction, name, value)
    __swig_getmethods__ = {}
    for _s in [_Action]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TupleListAction, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> TupleListAction"""
        this = _tst.new_TupleListAction()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tst.delete_TupleListAction
    __del__ = lambda self : None;
    def perform(self, *args):
        """perform(self, string_type string, int remaining_distance, PythonReference data)"""
        return _tst.TupleListAction_perform(self, *args)

    def result(self):
        """result(self) -> PythonReference"""
        return _tst.TupleListAction_result(self)

TupleListAction_swigregister = _tst.TupleListAction_swigregister
TupleListAction_swigregister(TupleListAction)

class ObjectSerializer(_object):
    """Proxy of C++ ObjectSerializer class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectSerializer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectSerializer, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> ObjectSerializer"""
        this = _tst.new_ObjectSerializer()
        try: self.this.append(this)
        except: self.this = this
    def write(self, *args):
        """write(self, std::ostream file, PythonReference data)"""
        return _tst.ObjectSerializer_write(self, *args)

    def read(self, *args):
        """read(self, std::istream file) -> PythonReference"""
        return _tst.ObjectSerializer_read(self, *args)

    __swig_destroy__ = _tst.delete_ObjectSerializer
    __del__ = lambda self : None;
ObjectSerializer_swigregister = _tst.ObjectSerializer_swigregister
ObjectSerializer_swigregister(ObjectSerializer)

class TST(_TST):
    """Proxy of C++ TST class"""
    __swig_setmethods__ = {}
    for _s in [_TST]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TST, name, value)
    __swig_getmethods__ = {}
    for _s in [_TST]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TST, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> TST"""
        this = _tst.new_TST()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tst.delete_TST
    __del__ = lambda self : None;
    def write_to_file(self, *args):
        """write_to_file(self, PythonReference file) -> PythonReference"""
        return _tst.TST_write_to_file(self, *args)

    def read_from_file(self, *args):
        """read_from_file(self, PythonReference file) -> PythonReference"""
        return _tst.TST_read_from_file(self, *args)

    def __getitem__(self, *args):
        """__getitem__(self, string_type string) -> PythonReference"""
        return _tst.TST___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(self, string_type string, PythonReference data) -> PythonReference"""
        return _tst.TST___setitem__(self, *args)

    def __delitem__(self, *args):
        """__delitem__(self, string_type string)"""
        return _tst.TST___delitem__(self, *args)

    def __contains__(self, *args):
        """__contains__(self, string_type string) -> PythonReference"""
        return _tst.TST___contains__(self, *args)

    def __iter__(self):
        """__iter__(self) -> TSTLexicalIterator"""
        return _tst.TST___iter__(self)

    def iterator(self, *args):
        """
        iterator(self) -> TSTLexicalIterator
        iterator(self, string_type string) -> TSTLexicalIterator
        """
        return _tst.TST_iterator(self, *args)

    def close_match_iterator(self, *args):
        """close_match_iterator(self, string_type string, int distance) -> TSTCloseMatchIterator"""
        return _tst.TST_close_match_iterator(self, *args)

    def put(self, *args):
        """put(self, string_type string, PythonReference data) -> PythonReference"""
        return _tst.TST_put(self, *args)

    def get(self, *args):
        """get(self, string_type string) -> PythonReference"""
        return _tst.TST_get(self, *args)

    def pack(self):
        """pack(self)"""
        return _tst.TST_pack(self)

    def walk(self, *args):
        """
        walk(self, _Filter filter, _Action to_perform) -> PythonReference
        walk(self, _Filter filter, _Action to_perform, string_type string) -> PythonReference
        """
        return _tst.TST_walk(self, *args)

    def close_match(self, *args):
        """
        close_match(self, string_type string, int maximum_distance, _Filter filter, 
            _Action to_perform) -> PythonReference
        """
        return _tst.TST_close_match(self, *args)

    def match(self, *args):
        """match(self, string_type string, _Filter filter, _Action to_perform) -> PythonReference"""
        return _tst.TST_match(self, *args)

    def scan(self, *args):
        """scan(self, string_type string, _Action to_perform) -> PythonReference"""
        return _tst.TST_scan(self, *args)

    def scan_with_stop_chars(self, *args):
        """scan_with_stop_chars(self, string_type string, string_type stop_chars, _Action to_perform) -> PythonReference"""
        return _tst.TST_scan_with_stop_chars(self, *args)

TST_swigregister = _tst.TST_swigregister
TST_swigregister(TST)

class _lexical_iterator_type(_object):
    """Proxy of C++ lexical_iterator<(char,PythonReference,memory_storage<(char,PythonReference)>,ObjectSerializer,string_type)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _lexical_iterator_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _lexical_iterator_type, name)
    __repr__ = _swig_repr
    state_left = _tst._lexical_iterator_type_state_left
    state_current = _tst._lexical_iterator_type_state_current
    state_right = _tst._lexical_iterator_type_state_right
    state_end = _tst._lexical_iterator_type_state_end
    def __init__(self, *args): 
        """
        __init__(self, tst<(char,PythonReference,memory_storage<(char,PythonReference)>,ObjectSerializer,qad_string<(char)>)> t, 
            qad_string<(char)> key, 
            int root) -> _lexical_iterator_type
        """
        this = _tst.new__lexical_iterator_type(*args)
        try: self.this.append(this)
        except: self.this = this
    def next(self):
        """next(self) -> lexical_iterator<(char,PythonReference,memory_storage<(char,PythonReference)>,ObjectSerializer,qad_string<(char)>)>::value_type"""
        return _tst._lexical_iterator_type_next(self)

    __swig_destroy__ = _tst.delete__lexical_iterator_type
    __del__ = lambda self : None;
_lexical_iterator_type_swigregister = _tst._lexical_iterator_type_swigregister
_lexical_iterator_type_swigregister(_lexical_iterator_type)

class _close_match_iterator_type(_object):
    """Proxy of C++ match_iterator<(char,PythonReference,memory_storage<(char,PythonReference)>,ObjectSerializer,string_type)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _close_match_iterator_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _close_match_iterator_type, name)
    __repr__ = _swig_repr
    state_left = _tst._close_match_iterator_type_state_left
    state_current = _tst._close_match_iterator_type_state_current
    state_skip_input = _tst._close_match_iterator_type_state_skip_input
    state_skip_base = _tst._close_match_iterator_type_state_skip_base
    state_right = _tst._close_match_iterator_type_state_right
    state_end = _tst._close_match_iterator_type_state_end
    def __init__(self, *args): 
        """
        __init__(self, tst<(char,PythonReference,memory_storage<(char,PythonReference)>,ObjectSerializer,qad_string<(char)>)> t, 
            qad_string<(char)> string, 
            int distance, 
            int root) -> _close_match_iterator_type
        """
        this = _tst.new__close_match_iterator_type(*args)
        try: self.this.append(this)
        except: self.this = this
    def next(self):
        """next(self) -> match_iterator<(char,PythonReference,memory_storage<(char,PythonReference)>,ObjectSerializer,qad_string<(char)>)>::value_type"""
        return _tst._close_match_iterator_type_next(self)

    __swig_destroy__ = _tst.delete__close_match_iterator_type
    __del__ = lambda self : None;
_close_match_iterator_type_swigregister = _tst._close_match_iterator_type_swigregister
_close_match_iterator_type_swigregister(_close_match_iterator_type)

class TSTLexicalIterator(_object):
    """Proxy of C++ TSTIterator<(lexical_iterator<(char,PythonReference,memory_storage<(char,PythonReference)>,ObjectSerializer,string_type)>)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TSTLexicalIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TSTLexicalIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __iter__(self):
        """__iter__(self) -> TSTLexicalIterator"""
        return _tst.TSTLexicalIterator___iter__(self)

    def next(self):
        """next(self) -> PyObject"""
        return _tst.TSTLexicalIterator_next(self)

    __swig_destroy__ = _tst.delete_TSTLexicalIterator
    __del__ = lambda self : None;
TSTLexicalIterator_swigregister = _tst.TSTLexicalIterator_swigregister
TSTLexicalIterator_swigregister(TSTLexicalIterator)

class TSTCloseMatchIterator(_object):
    """Proxy of C++ TSTIterator<(match_iterator<(char,PythonReference,memory_storage<(char,PythonReference)>,ObjectSerializer,string_type)>)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TSTCloseMatchIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TSTCloseMatchIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __iter__(self):
        """__iter__(self) -> TSTCloseMatchIterator"""
        return _tst.TSTCloseMatchIterator___iter__(self)

    def next(self):
        """next(self) -> PyObject"""
        return _tst.TSTCloseMatchIterator_next(self)

    __swig_destroy__ = _tst.delete_TSTCloseMatchIterator
    __del__ = lambda self : None;
TSTCloseMatchIterator_swigregister = _tst.TSTCloseMatchIterator_swigregister
TSTCloseMatchIterator_swigregister(TSTCloseMatchIterator)



