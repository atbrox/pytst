/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.20
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_tst_WRAP_H_
#define SWIG_tst_WRAP_H_

class Swig::Director;


class SwigDirector__object_tst : public tst<PyObject * >, public Swig::Director {

public:
    SwigDirector__object_tst(PyObject *self, FILE *file, serializer<PyObject * > *reader, bool disown = false);
    SwigDirector__object_tst(PyObject *self, int initial_size, PyObject *default_value, bool disown = false);
    virtual void put(char *string, PyObject *data);
    virtual void __setitem__(char *string, PyObject *data);
    virtual size_t bytes_allocated();
    virtual int get_maximum_key_length();
    virtual PyObject * common_prefix(char *string, filter<PyObject * > *filter, action<PyObject * > *to_perform);
    virtual void adjust();
    virtual PyObject * walk(filter<PyObject * > *filter, action<PyObject * > *to_perform);
    virtual PyObject * almost(char *string, int string_length, int maximum_distance, filter<PyObject * > *filter, action<PyObject * > *to_perform);
    virtual void write(FILE *file, serializer<PyObject * > *writer);
    virtual PyObject * get(char *string);
    virtual PyObject * __getitem__(char *string);
    virtual void debug();
};


class SwigDirector_Action : public action<PyObject * >, public Swig::Director {

public:
    SwigDirector_Action(PyObject* self, bool disown = false);
    virtual void perform(char *key, int remaining_distance, PyObject *data);
    virtual PyObject * result();
};


class SwigDirector_Filter : public filter<PyObject * >, public Swig::Director {

public:
    SwigDirector_Filter(PyObject* self, bool disown = false);
    virtual PyObject * perform(char *key, int remaining_distance, PyObject *data);
};


class SwigDirector_Serializer : public serializer<PyObject * >, public Swig::Director {

public:
    SwigDirector_Serializer(PyObject* self, bool disown = false);
    virtual void write(FILE *file, PyObject *data);
    virtual PyObject * read(FILE *file);
};


class SwigDirector_IntegerTST : public tst<int >, public Swig::Director {

public:
    SwigDirector_IntegerTST(PyObject *self, FILE *file, serializer<int > *reader, bool disown = false);
    SwigDirector_IntegerTST(PyObject *self, int initial_size, int default_value, bool disown = false);
    virtual int almost(char *string, int string_length, int maximum_distance, filter<int > *filter, action<int > *to_perform);
    virtual size_t bytes_allocated();
    virtual int get_maximum_key_length();
    virtual void put(char *string, int data);
    virtual void __setitem__(char *string, int data);
    virtual void adjust();
    virtual int walk(filter<int > *filter, action<int > *to_perform);
    virtual int common_prefix(char *string, filter<int > *filter, action<int > *to_perform);
    virtual int get(char *string);
    virtual int __getitem__(char *string);
    virtual void debug();
    virtual void write(FILE *file, serializer<int > *writer);
};


class SwigDirector_IntegerAction : public action<int >, public Swig::Director {

public:
    SwigDirector_IntegerAction(PyObject* self, bool disown = false);
    virtual void perform(char *key, int remaining_distance, int data);
    virtual int result();
};


class SwigDirector_IntegerFilter : public filter<int >, public Swig::Director {

public:
    SwigDirector_IntegerFilter(PyObject* self, bool disown = false);
    virtual int perform(char *key, int remaining_distance, int data);
};


class SwigDirector_IntegerSerializer : public serializer<int >, public Swig::Director {

public:
    SwigDirector_IntegerSerializer(PyObject* self, bool disown = false);
    virtual int read(FILE *file);
    virtual void write(FILE *file, int data);
};


#endif
