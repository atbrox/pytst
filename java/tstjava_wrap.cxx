/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.24
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif


#ifndef SWIG_TEMPLATE_DISAMBIGUATOR
#  if defined(__SUNPRO_CC) 
#    define SWIG_TEMPLATE_DISAMBIGUATOR template
#  else
#    define SWIG_TEMPLATE_DISAMBIGUATOR 
#  endif
#endif


#if defined(__GNUC__)
    typedef long long __int64; /*For gcc on Windows */
#endif
#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" } };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include "tst.h"


#ifdef __cplusplus
extern "C" {
#endif

JNIEXPORT jint JNICALL Java_tstJNI_get_1UNDEFINED_1INDEX(JNIEnv *jenv, jclass jcls) {
    jint jresult = 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    result = (int) -1;
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jstring JNICALL Java_tstJNI_get_1TST_1VERSION(JNIEnv *jenv, jclass jcls) {
    jstring jresult = 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    result = (char *) "0.6";
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT jlong JNICALL Java_tstJNI_new_1JavaTST_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jlong jresult = 0 ;
    FILE *arg1 = (FILE *) 0 ;
    serializer<char,char * > *arg2 = (serializer<char,char * > *) 0 ;
    tst<char,char * > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(FILE **)&jarg1; 
    arg2 = *(serializer<char,char * > **)&jarg2; 
    result = (tst<char,char * > *)new tst<char,char * >(arg1,arg2);
    
    *(tst<char,char * > **)&jresult = result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_tstJNI_new_1JavaTST_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
    jlong jresult = 0 ;
    int arg1 ;
    char *arg2 = (char *) 0 ;
    tst<char,char * > *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = (int)jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return 0;
        }
    }
    result = (tst<char,char * > *)new tst<char,char * >(arg1,arg2);
    
    *(tst<char,char * > **)&jresult = result; 
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_tstJNI_delete_1JavaTST(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    tst<char,char * > *arg1 = (tst<char,char * > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(tst<char,char * > **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_tstJNI_JavaTST_1pack(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    tst<char,char * > *arg1 = (tst<char,char * > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(tst<char,char * > **)&jarg1; 
    (arg1)->pack();
    
}


JNIEXPORT jstring JNICALL Java_tstJNI_JavaTST_1walk(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    jstring jresult = 0 ;
    tst<char,char * > *arg1 = (tst<char,char * > *) 0 ;
    filter<char,char * > *arg2 = (filter<char,char * > *) 0 ;
    action<char,char * > *arg3 = (action<char,char * > *) 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(tst<char,char * > **)&jarg1; 
    arg2 = *(filter<char,char * > **)&jarg2; 
    arg3 = *(action<char,char * > **)&jarg3; 
    result = (char *)(arg1)->walk(arg2,arg3);
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT jstring JNICALL Java_tstJNI_JavaTST_1almost(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3, jint jarg4, jlong jarg5, jlong jarg6) {
    jstring jresult = 0 ;
    tst<char,char * > *arg1 = (tst<char,char * > *) 0 ;
    char *arg2 = (char *) 0 ;
    int arg3 ;
    int arg4 ;
    filter<char,char * > *arg5 = (filter<char,char * > *) 0 ;
    action<char,char * > *arg6 = (action<char,char * > *) 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(tst<char,char * > **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return 0;
        }
    }
    arg3 = (int)jarg3; 
    arg4 = (int)jarg4; 
    arg5 = *(filter<char,char * > **)&jarg5; 
    arg6 = *(action<char,char * > **)&jarg6; 
    result = (char *)(arg1)->almost(arg2,arg3,arg4,arg5,arg6);
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
    return jresult;
}


JNIEXPORT jstring JNICALL Java_tstJNI_JavaTST_1common_1prefix(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3, jlong jarg4) {
    jstring jresult = 0 ;
    tst<char,char * > *arg1 = (tst<char,char * > *) 0 ;
    char *arg2 = (char *) 0 ;
    filter<char,char * > *arg3 = (filter<char,char * > *) 0 ;
    action<char,char * > *arg4 = (action<char,char * > *) 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(tst<char,char * > **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return 0;
        }
    }
    arg3 = *(filter<char,char * > **)&jarg3; 
    arg4 = *(action<char,char * > **)&jarg4; 
    result = (char *)(arg1)->common_prefix(arg2,arg3,arg4);
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
    return jresult;
}


JNIEXPORT jstring JNICALL Java_tstJNI_JavaTST_1scan(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3) {
    jstring jresult = 0 ;
    tst<char,char * > *arg1 = (tst<char,char * > *) 0 ;
    char *arg2 = (char *) 0 ;
    action<char,char * > *arg3 = (action<char,char * > *) 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(tst<char,char * > **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return 0;
        }
    }
    arg3 = *(action<char,char * > **)&jarg3; 
    result = (char *)(arg1)->scan(arg2,arg3);
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
    return jresult;
}


JNIEXPORT jstring JNICALL Java_tstJNI_JavaTST_1scan_1with_1stop_1chars(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3, jlong jarg4) {
    jstring jresult = 0 ;
    tst<char,char * > *arg1 = (tst<char,char * > *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    action<char,char * > *arg4 = (action<char,char * > *) 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(tst<char,char * > **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return 0;
        }
    }
    {
        arg3 = 0;
        if (jarg3) {
            arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
            if (!arg3) return 0;
        }
    }
    arg4 = *(action<char,char * > **)&jarg4; 
    result = (char *)(arg1)->scan_with_stop_chars(arg2,arg3,arg4);
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
    {
        if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3); 
    }
    return jresult;
}


JNIEXPORT jstring JNICALL Java_tstJNI_JavaTST_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    jstring jresult = 0 ;
    tst<char,char * > *arg1 = (tst<char,char * > *) 0 ;
    char *arg2 = (char *) 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(tst<char,char * > **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return 0;
        }
    }
    result = (char *)(arg1)->get(arg2);
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
    return jresult;
}


JNIEXPORT jstring JNICALL Java_tstJNI_JavaTST_1get_1or_1build(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jlong jarg3) {
    jstring jresult = 0 ;
    tst<char,char * > *arg1 = (tst<char,char * > *) 0 ;
    char *arg2 = (char *) 0 ;
    filter<char,char * > *arg3 = (filter<char,char * > *) 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(tst<char,char * > **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return 0;
        }
    }
    arg3 = *(filter<char,char * > **)&jarg3; 
    result = (char *)(arg1)->get_or_build(arg2,arg3);
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
    return jresult;
}


JNIEXPORT jstring JNICALL Java_tstJNI_JavaTST_1put(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jstring jarg3) {
    jstring jresult = 0 ;
    tst<char,char * > *arg1 = (tst<char,char * > *) 0 ;
    char *arg2 = (char *) 0 ;
    char *arg3 = (char *) 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(tst<char,char * > **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return 0;
        }
    }
    {
        arg3 = 0;
        if (jarg3) {
            arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
            if (!arg3) return 0;
        }
    }
    result = (char *)(arg1)->put(arg2,arg3);
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
    {
        if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3); 
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_tstJNI_JavaTST_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
    tst<char,char * > *arg1 = (tst<char,char * > *) 0 ;
    char *arg2 = (char *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(tst<char,char * > **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    (arg1)->remove(arg2);
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
}


JNIEXPORT jint JNICALL Java_tstJNI_JavaTST_1get_1maximum_1key_1length(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jint jresult = 0 ;
    tst<char,char * > *arg1 = (tst<char,char * > *) 0 ;
    int result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(tst<char,char * > **)&jarg1; 
    result = (int)(arg1)->get_maximum_key_length();
    
    jresult = (jint)result; 
    return jresult;
}


JNIEXPORT jlong JNICALL Java_tstJNI_JavaTST_1bytes_1allocated(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong jresult = 0 ;
    tst<char,char * > *arg1 = (tst<char,char * > *) 0 ;
    size_t result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(tst<char,char * > **)&jarg1; 
    result = (arg1)->bytes_allocated();
    
    jresult = (jlong)result; 
    return jresult;
}


JNIEXPORT void JNICALL Java_tstJNI_JavaTST_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
    tst<char,char * > *arg1 = (tst<char,char * > *) 0 ;
    FILE *arg2 = (FILE *) 0 ;
    serializer<char,char * > *arg3 = (serializer<char,char * > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(tst<char,char * > **)&jarg1; 
    arg2 = *(FILE **)&jarg2; 
    arg3 = *(serializer<char,char * > **)&jarg3; 
    (arg1)->write(arg2,arg3);
    
}


JNIEXPORT void JNICALL Java_tstJNI_JavaTST_1debug_1print_1root(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    tst<char,char * > *arg1 = (tst<char,char * > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(tst<char,char * > **)&jarg1; 
    (arg1)->debug_print_root();
    
}


JNIEXPORT void JNICALL Java_tstJNI_delete_1Action(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    action<char,char * > *arg1 = (action<char,char * > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(action<char,char * > **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_tstJNI_Action_1perform(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3, jstring jarg4) {
    action<char,char * > *arg1 = (action<char,char * > *) 0 ;
    char *arg2 = (char *) 0 ;
    int arg3 ;
    char *arg4 = (char *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(action<char,char * > **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return ;
        }
    }
    arg3 = (int)jarg3; 
    {
        arg4 = 0;
        if (jarg4) {
            arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
            if (!arg4) return ;
        }
    }
    (arg1)->perform(arg2,arg3,arg4);
    
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
    {
        if (arg4) jenv->ReleaseStringUTFChars(jarg4, arg4); 
    }
}


JNIEXPORT jstring JNICALL Java_tstJNI_Action_1result(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jstring jresult = 0 ;
    action<char,char * > *arg1 = (action<char,char * > *) 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(action<char,char * > **)&jarg1; 
    result = (char *)(arg1)->result();
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_tstJNI_delete_1Filter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    filter<char,char * > *arg1 = (filter<char,char * > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(filter<char,char * > **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT jstring JNICALL Java_tstJNI_Filter_1perform(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3, jstring jarg4) {
    jstring jresult = 0 ;
    filter<char,char * > *arg1 = (filter<char,char * > *) 0 ;
    char *arg2 = (char *) 0 ;
    int arg3 ;
    char *arg4 = (char *) 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(filter<char,char * > **)&jarg1; 
    {
        arg2 = 0;
        if (jarg2) {
            arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
            if (!arg2) return 0;
        }
    }
    arg3 = (int)jarg3; 
    {
        arg4 = 0;
        if (jarg4) {
            arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
            if (!arg4) return 0;
        }
    }
    result = (char *)(arg1)->perform(arg2,arg3,arg4);
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    {
        if (arg2) jenv->ReleaseStringUTFChars(jarg2, arg2); 
    }
    {
        if (arg4) jenv->ReleaseStringUTFChars(jarg4, arg4); 
    }
    return jresult;
}


JNIEXPORT void JNICALL Java_tstJNI_delete_1Serializer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    serializer<char,char * > *arg1 = (serializer<char,char * > *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(serializer<char,char * > **)&jarg1; 
    delete arg1;
    
}


JNIEXPORT void JNICALL Java_tstJNI_Serializer_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jstring jarg3) {
    serializer<char,char * > *arg1 = (serializer<char,char * > *) 0 ;
    FILE *arg2 = (FILE *) 0 ;
    char *arg3 = (char *) 0 ;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(serializer<char,char * > **)&jarg1; 
    arg2 = *(FILE **)&jarg2; 
    {
        arg3 = 0;
        if (jarg3) {
            arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
            if (!arg3) return ;
        }
    }
    (arg1)->write(arg2,arg3);
    
    {
        if (arg3) jenv->ReleaseStringUTFChars(jarg3, arg3); 
    }
}


JNIEXPORT jstring JNICALL Java_tstJNI_Serializer_1read(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
    jstring jresult = 0 ;
    serializer<char,char * > *arg1 = (serializer<char,char * > *) 0 ;
    FILE *arg2 = (FILE *) 0 ;
    char *result;
    
    (void)jenv;
    (void)jcls;
    arg1 = *(serializer<char,char * > **)&jarg1; 
    arg2 = *(FILE **)&jarg2; 
    result = (char *)(arg1)->read(arg2);
    
    {
        if(result) jresult = jenv->NewStringUTF(result); 
    }
    return jresult;
}


#ifdef __cplusplus
}
#endif

