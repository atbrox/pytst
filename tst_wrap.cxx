/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.21
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
#define SWIG_DIRECTORS

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};                                                    
#endif


#include "Python.h"

/*************************************************************** -*- c -*-
 * python/precommon.swg
 *
 * Rename all exported symbols from common.swg, to avoid symbol
 * clashes if multiple interpreters are included
 *
 ************************************************************************/

#define SWIG_TypeRegister    SWIG_Python_TypeRegister
#define SWIG_TypeCheck       SWIG_Python_TypeCheck
#define SWIG_TypeCast        SWIG_Python_TypeCast
#define SWIG_TypeDynamicCast SWIG_Python_TypeDynamicCast
#define SWIG_TypeName        SWIG_Python_TypeName
#define SWIG_TypeQuery       SWIG_Python_TypeQuery
#define SWIG_TypeClientData  SWIG_Python_TypeClientData
#define SWIG_PackData        SWIG_Python_PackData 
#define SWIG_UnpackData      SWIG_Python_UnpackData 


/***********************************************************************
 * common.swg
 *
 *     This file contains generic SWIG runtime support for pointer
 *     type checking as well as a few commonly used macros to control
 *     external linkage.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (c) 1999-2000, The University of Chicago
 * 
 * This file may be freely redistributed without license or fee provided
 * this copyright message remains intact.
 ************************************************************************/

#include <string.h>

#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  if defined(_MSC_VER) || defined(__GNUC__)
#    if defined(STATIC_LINKED)
#      define SWIGEXPORT(a) a
#      define SWIGIMPORT(a) extern a
#    else
#      define SWIGEXPORT(a) __declspec(dllexport) a
#      define SWIGIMPORT(a) extern a
#    endif
#  else
#    if defined(__BORLANDC__)
#      define SWIGEXPORT(a) a _export
#      define SWIGIMPORT(a) a _export
#    else
#      define SWIGEXPORT(a) a
#      define SWIGIMPORT(a) a
#    endif
#  endif
#else
#  define SWIGEXPORT(a) a
#  define SWIGIMPORT(a) a
#endif

#ifdef SWIG_GLOBAL
#  define SWIGRUNTIME(a) SWIGEXPORT(a)
#else
#  define SWIGRUNTIME(a) static a
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

typedef struct swig_type_info {
  const char             *name;
  swig_converter_func     converter;
  const char             *str;
  void                   *clientdata;
  swig_dycast_func        dcast;
  struct swig_type_info  *next;
  struct swig_type_info  *prev;
} swig_type_info;

#ifdef SWIG_NOINCLUDE

SWIGIMPORT(swig_type_info *) SWIG_TypeRegister(swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeCheck(char *c, swig_type_info *);
SWIGIMPORT(void *)           SWIG_TypeCast(swig_type_info *, void *);
SWIGIMPORT(swig_type_info *) SWIG_TypeDynamicCast(swig_type_info *, void **);
SWIGIMPORT(const char *)     SWIG_TypeName(const swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeQuery(const char *);
SWIGIMPORT(void)             SWIG_TypeClientData(swig_type_info *, void *);
SWIGIMPORT(char *)           SWIG_PackData(char *, void *, int);
SWIGIMPORT(char *)           SWIG_UnpackData(char *, void *, int);

#else

static swig_type_info *swig_type_list = 0;

/* Register a type mapping with the type-checking */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeRegister(swig_type_info *ti) {
  swig_type_info *tc, *head, *ret, *next;
  /* Check to see if this type has already been registered */
  tc = swig_type_list;
  while (tc) {
    if (strcmp(tc->name, ti->name) == 0) {
      /* Already exists in the table.  Just add additional types to the list */
      if (tc->clientdata) ti->clientdata = tc->clientdata;
      head = tc;
      next = tc->next;
      goto l1;
    }
    tc = tc->prev;
  }
  head = ti;
  next = 0;

  /* Place in list */
  ti->prev = swig_type_list;
  swig_type_list = ti;

  /* Build linked lists */
  l1:
  ret = head;
  tc = ti + 1;
  /* Patch up the rest of the links */
  while (tc->name) {
    head->next = tc;
    tc->prev = head;
    head = tc;
    tc++;
  }
  if (next) next->prev = head;
  head->next = next;
  return ret;
}

/* Check the typename */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeCheck(char *c, swig_type_info *ty) {
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  do {
    if (strcmp(s->name,c) == 0) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
        s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      s->prev = ty;
      return s;
    }
    s = s->next;
  } while (s && (s != ty->next));
  return 0;
}

/* Cast a pointer up an inheritance hierarchy */
SWIGRUNTIME(void *) 
SWIG_TypeCast(swig_type_info *ty, void *ptr) {
  if ((!ty) || (!ty->converter)) return ptr;
  return (*ty->converter)(ptr);
}

/* Dynamic pointer casting. Down an inheritance hierarchy */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/* Return the name associated with this type */
SWIGRUNTIME(const char *)
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/* Search for a swig_type_info structure */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeQuery(const char *name) {
  swig_type_info *ty = swig_type_list;
  while (ty) {
    if (ty->str && (strcmp(name,ty->str) == 0)) return ty;
    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
    ty = ty->prev;
  }
  return 0;
}

/* Set the clientdata field for a type */
SWIGRUNTIME(void)
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_type_info *tc, *equiv;
  if (ti->clientdata == clientdata) return;
  ti->clientdata = clientdata;
  equiv = ti->next;
  while (equiv) {
    if (!equiv->converter) {
      tc = swig_type_list;
      while (tc) {
        if ((strcmp(tc->name, equiv->name) == 0))
          SWIG_TypeClientData(tc,clientdata);
        tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}

/* Pack binary data into a string */
SWIGRUNTIME(char *)
SWIG_PackData(char *c, void *ptr, int sz) {
  static char hex[17] = "0123456789abcdef";
  int i;
  unsigned char *u = (unsigned char *) ptr;
  register unsigned char uu;
  for (i = 0; i < sz; i++,u++) {
    uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* Unpack binary data from a string */
SWIGRUNTIME(char *)
SWIG_UnpackData(char *c, void *ptr, int sz) {
  register unsigned char uu = 0;
  register int d;
  unsigned char *u = (unsigned char *) ptr;
  int i;
  for (i = 0; i < sz; i++, u++) {
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    *u = uu;
  }
  return c;
}

#endif

#ifdef __cplusplus
}
#endif

/***********************************************************************
 * python.swg
 *
 *     This file contains the runtime support for Python modules
 *     and includes code for managing global variables and pointer
 *     type checking.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 ************************************************************************/

#include "Python.h"

#ifdef __cplusplus
extern "C" {
#endif

#define SWIG_PY_INT     1
#define SWIG_PY_FLOAT   2
#define SWIG_PY_STRING  3
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Flags for pointer conversion */

#define SWIG_POINTER_EXCEPTION     0x1
#define SWIG_POINTER_DISOWN        0x2

/* Exception handling in wrappers */
#define SWIG_fail   goto fail

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;

/* Common SWIG API */
#define SWIG_ConvertPtr(obj, pp, type, flags) \
  SWIG_Python_ConvertPtr(obj, pp, type, flags)
#define SWIG_NewPointerObj(p, type, flags) \
  SWIG_Python_NewPointerObj(p, type, flags)
#define SWIG_MustGetPtr(p, type, argnum, flags) \
  SWIG_Python_MustGetPtr(p, type, argnum, flags)

/* Python-specific SWIG API */
#define SWIG_newvarlink() \
  SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr) \
  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_ConvertPacked(obj, ptr, sz, ty, flags) \
  SWIG_Python_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type) \
  SWIG_Python_NewPackedObj(ptr, sz, type)
#define SWIG_InstallConstants(d, constants) \
  SWIG_Python_InstallConstants(d, constants)

#ifdef SWIG_NOINCLUDE

SWIGIMPORT(int)               SWIG_Python_ConvertPtr(PyObject *, void **, swig_type_info *, int);
SWIGIMPORT(PyObject *)        SWIG_Python_NewPointerObj(void *, swig_type_info *,int own);
SWIGIMPORT(void *)            SWIG_Python_MustGetPtr(PyObject *, swig_type_info *, int, int);
SWIGIMPORT(PyObject *)        SWIG_Python_newvarlink(void);
SWIGIMPORT(void)              SWIG_Python_addvarlink(PyObject *, char *, PyObject *(*)(void), int (*)(PyObject *));
SWIGIMPORT(int)               SWIG_Python_ConvertPacked(PyObject *, void *, int sz, swig_type_info *, int);
SWIGIMPORT(PyObject *)        SWIG_Python_NewPackedObj(void *, int sz, swig_type_info *);
SWIGIMPORT(void)              SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]);

#else

/* -----------------------------------------------------------------------------
 * global variable support code.
 * ----------------------------------------------------------------------------- */

typedef struct swig_globalvar {   
  char       *name;                  /* Name of global variable */
  PyObject *(*get_attr)(void);       /* Return the current value */
  int       (*set_attr)(PyObject *); /* Set the value */
  struct swig_globalvar *next;
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar *vars;
} swig_varlinkobject;

static PyObject *
swig_varlink_repr(swig_varlinkobject *v) {
  v = v;
  return PyString_FromString("<Global variables>");
}

static int
swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags) {
  swig_globalvar  *var;
  flags = flags;
  fprintf(fp,"Global variables { ");
  for (var = v->vars; var; var=var->next) {
    fprintf(fp,"%s", var->name);
    if (var->next) fprintf(fp,", ");
  }
  fprintf(fp," }\n");
  return 0;
}

static PyObject *
swig_varlink_getattr(swig_varlinkobject *v, char *n) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->get_attr)();
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return NULL;
}

static int
swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->set_attr)(p);
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return 1;
}

statichere PyTypeObject varlinktype = {
  PyObject_HEAD_INIT(0)              
  0,
  (char *)"swigvarlink",              /* Type name    */
  sizeof(swig_varlinkobject),         /* Basic size   */
  0,                                  /* Itemsize     */
  0,                                  /* Deallocator  */ 
  (printfunc) swig_varlink_print,     /* Print        */
  (getattrfunc) swig_varlink_getattr, /* get attr     */
  (setattrfunc) swig_varlink_setattr, /* Set attr     */
  0,                                  /* tp_compare   */
  (reprfunc) swig_varlink_repr,       /* tp_repr      */    
  0,                                  /* tp_as_number */
  0,                                  /* tp_as_mapping*/
  0,                                  /* tp_hash      */
};

/* Create a variable linking object for use later */
SWIGRUNTIME(PyObject *)
SWIG_Python_newvarlink(void) {
  swig_varlinkobject *result = 0;
  result = PyMem_NEW(swig_varlinkobject,1);
  varlinktype.ob_type = &PyType_Type;    /* Patch varlinktype into a PyType */
  result->ob_type = &varlinktype;
  result->vars = 0;
  result->ob_refcnt = 0;
  Py_XINCREF((PyObject *) result);
  return ((PyObject*) result);
}

SWIGRUNTIME(void)
SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
  swig_varlinkobject *v;
  swig_globalvar *gv;
  v= (swig_varlinkobject *) p;
  gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  gv->name = (char *) malloc(strlen(name)+1);
  strcpy(gv->name,name);
  gv->get_attr = get_attr;
  gv->set_attr = set_attr;
  gv->next = v->vars;
  v->vars = gv;
}

/* Convert a pointer value */
SWIGRUNTIME(int)
SWIG_Python_ConvertPtr(PyObject *obj, void **ptr, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c = 0;
  static PyObject *SWIG_this = 0;
  int    newref = 0;
  PyObject  *pyobj = 0;

  if (!obj) return 0;
  if (obj == Py_None) {
    *ptr = 0;
    return 0;
  }
#ifdef SWIG_COBJECT_TYPES
  if (!(PyCObject_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyCObject_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  }  
  *ptr = PyCObject_AsVoidPtr(obj);
  c = (char *) PyCObject_GetDesc(obj);
  if (newref) Py_DECREF(obj);
  goto cobject;
#else
  if (!(PyString_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyString_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  } 
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') {
    *ptr = (void *) 0;
    if (strcmp(c,"NULL") == 0) {
      if (newref) { Py_DECREF(obj); }
      return 0;
    } else {
      if (newref) { Py_DECREF(obj); }
      goto type_error;
    }
  }
  c++;
  c = SWIG_UnpackData(c,ptr,sizeof(void *));
  if (newref) { Py_DECREF(obj); }
#endif

#ifdef SWIG_COBJECT_TYPES
cobject:
#endif

  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
    *ptr = SWIG_TypeCast(tc,(void*) *ptr);
  }

  if ((pyobj) && (flags & SWIG_POINTER_DISOWN)) {
    PyObject *zero = PyInt_FromLong(0);
    PyObject_SetAttrString(pyobj,(char*)"thisown",zero);
    Py_DECREF(zero);
  }
  return 0;

type_error:
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty && c) {
      char *temp = (char *) malloc(64+strlen(ty->name)+strlen(c));
      sprintf(temp,"Type error. Got %s, expected %s", c, ty->name);
      PyErr_SetString(PyExc_TypeError, temp);
      free((char *) temp);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME(void *)
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags) {
  void *result;
  SWIG_Python_ConvertPtr(obj, &result, ty, flags | SWIG_POINTER_EXCEPTION);
  return result;
}

/* Convert a packed value value */
SWIGRUNTIME(int)
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, int sz, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c = 0;

  if ((!obj) || (!PyString_Check(obj))) goto type_error;
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return 0;

type_error:

  if (flags) {
    if (ty && c) {
      char *temp = (char *) malloc(64+strlen(ty->name)+strlen(c));
      sprintf(temp,"Type error. Got %s, expected %s", c, ty->name);
      PyErr_SetString(PyExc_TypeError, temp);
      free((char *) temp);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Create a new pointer object */
SWIGRUNTIME(PyObject *)
SWIG_Python_NewPointerObj(void *ptr, swig_type_info *type, int own) {
  PyObject *robj;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#ifdef SWIG_COBJECT_TYPES
  robj = PyCObject_FromVoidPtrAndDesc((void *) ptr, (char *) type->name, NULL);
#else
  {
    char result[1024];
    char *r = result;
    *(r++) = '_';
    r = SWIG_PackData(r,&ptr,sizeof(void *));
    strcpy(r,type->name);
    robj = PyString_FromString(result);
  }
#endif
  if (!robj || (robj == Py_None)) return robj;
  if (type->clientdata) {
    PyObject *inst;
    PyObject *args = Py_BuildValue((char*)"(O)", robj);
    Py_DECREF(robj);
    inst = PyObject_CallObject((PyObject *) type->clientdata, args);
    Py_DECREF(args);
    if (inst) {
      if (own) {
        PyObject *n = PyInt_FromLong(1);
        PyObject_SetAttrString(inst,(char*)"thisown",n);
        Py_DECREF(n);
      }
      robj = inst;
    }
  }
  return robj;
}

SWIGRUNTIME(PyObject *)
SWIG_Python_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,type->name);
  return PyString_FromString(result);
}

/* Install Constants */
SWIGRUNTIME(void)
SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
  int i;
  PyObject *obj;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_PY_INT:
      obj = PyInt_FromLong(constants[i].lvalue);
      break;
    case SWIG_PY_FLOAT:
      obj = PyFloat_FromDouble(constants[i].dvalue);
      break;
    case SWIG_PY_STRING:
      obj = PyString_FromString((char *) constants[i].pvalue);
      break;
    case SWIG_PY_POINTER:
      obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
      break;
    case SWIG_PY_BINARY:
      obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
      break;
    default:
      obj = 0;
      break;
    }
    if (obj) {
      PyDict_SetItemString(d,constants[i].name,obj);
      Py_DECREF(obj);
    }
  }
}

#endif

/* Contract support */

#define SWIG_contract_assert(expr, msg) if (!(expr)) { PyErr_SetString(PyExc_RuntimeError, (char *) msg ); goto fail; } else

#ifdef __cplusplus
}
#endif


/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_FILE swig_types[0] 
#define  SWIGTYPE_p_TSTException swig_types[1] 
#define  SWIGTYPE_p_CallableFilter swig_types[2] 
#define  SWIGTYPE_p_actionTPyObject_p_t swig_types[3] 
#define  SWIGTYPE_p_filterTPyObject_p_t swig_types[4] 
#define  SWIGTYPE_p_serializerTPyObject_p_t swig_types[5] 
#define  SWIGTYPE_p_tstTPyObject_p_t swig_types[6] 
#define  SWIGTYPE_p_DictAction swig_types[7] 
#define  SWIGTYPE_p_ListAction swig_types[8] 
#define  SWIGTYPE_p_CallableAction swig_types[9] 
#define  SWIGTYPE_p_ObjectSerializer swig_types[10] 
#define  SWIGTYPE_p_TST swig_types[11] 
static swig_type_info *swig_types[13];

/* -------- TYPES TABLE (END) -------- */


/*-----------------------------------------------
              @(target):= _tst.so
  ------------------------------------------------*/
#define SWIG_init    init_tst

#define SWIG_name    "_tst"

#include "TST.cxx"

/***********************************************************************
 * director.swg
 *
 *     This file contains support for director classes that proxy
 *     method calls from C++ to Python extensions.
 *
 * Author : Mark Rose (mrose@stm.lbl.gov)
 ************************************************************************/

#ifdef __cplusplus

#include <string>

namespace Swig {
  /* base class for director exceptions */
  class DirectorException {
    protected:
      std::string swig_msg;
    public:
      DirectorException(const char* msg="") {
      }
      const char *getMessage() const { 
        return swig_msg.c_str(); 
      }
      virtual ~DirectorException() {}
  };

  /* type mismatch in the return value from a python method call */
  class DirectorTypeMismatchException : public Swig::DirectorException {
    public:
      DirectorTypeMismatchException(const char* msg="") {
        swig_msg = "Swig director type mismatch: ";
        swig_msg += msg;
        PyErr_SetString(PyExc_TypeError, msg);
      }
  };

  /* any python exception that occurs during a director method call */
  class DirectorMethodException : public Swig::DirectorException {};

  /* attempt to call a pure virtual method via a director method */
  class DirectorPureVirtualException : public Swig::DirectorException {};


  /* simple thread abstraction for pthreads on win32 */
#ifdef __THREAD__
#define __PTHREAD__
#if defined(_WIN32) || defined(__WIN32__)
#define pthread_mutex_lock EnterCriticalSection
#define pthread_mutex_unlock LeaveCriticalSection
#define pthread_mutex_t CRITICAL_SECTION
#define MUTEX_INIT(var) CRITICAL_SECTION var
#else
#include <pthread.h>
#define MUTEX_INIT(var) pthread_mutex_t var = PTHREAD_MUTEX_INITIALIZER 
#endif
#endif


  /* director base class */
  class Director {
    private:
      /* pointer to the wrapped python object */
      PyObject* swig_self;
      /* flag indicating whether the object is owned by python or c++ */
      mutable bool swig_disown_flag;
      /* shared flag for breaking recursive director calls */
      static bool swig_up;

#ifdef __PTHREAD__
      /* locks for sharing the swig_up flag in a threaded environment */
      static pthread_mutex_t swig_mutex_up;
      static bool swig_mutex_active;
      static pthread_t swig_mutex_thread;
#endif

      /* decrement the reference count of the wrapped python object */
      void swig_decref() const { 
        if (swig_disown_flag) {
          Py_DECREF(swig_self); 
        }
      }

      /* reset the swig_up flag once the routing direction has been determined */
#ifdef __PTHREAD__
      void swig_clear_up() const { 
        Swig::Director::swig_up = false; 
        Swig::Director::swig_mutex_active = false;
        pthread_mutex_unlock(&swig_mutex_up);
      }
#else
      void swig_clear_up() const { 
        Swig::Director::swig_up = false; 
      }
#endif

    public:
      /* wrap a python object, optionally taking ownership */
      Director(PyObject* self, bool disown) : swig_self(self), swig_disown_flag(disown) {
        swig_incref();
      }

      /* discard our reference at destruction */
      virtual ~Director() {
        swig_decref(); 
      }

      /* return a pointer to the wrapped python object */
      PyObject *swig_get_self() const { 
        return swig_self; 
      }

      /* get the swig_up flag to determine if the method call should be routed
       * to the c++ base class or through the wrapped python object
       */
#ifdef __PTHREAD__
      bool swig_get_up() const { 
        if (Swig::Director::swig_mutex_active) {
          if (pthread_equal(Swig::Director::swig_mutex_thread, pthread_self())) {
            bool up = swig_up;
            swig_clear_up();
            return up;
          }
        }
        return 0;
      }
#else 
      bool swig_get_up() const { 
        bool up = swig_up;
        swig_up = false;
        return up;
      }
#endif

      /* set the swig_up flag if the next method call should be directed to
       * the c++ base class rather than the wrapped python object
       */
#ifdef __PTHREAD__
      void swig_set_up() const { 
        pthread_mutex_lock(&Swig::Director::swig_mutex_up);
        Swig::Director::swig_mutex_thread = pthread_self();
        Swig::Director::swig_mutex_active = true;
        Swig::Director::swig_up = true; 
      }
#else 
      void swig_set_up() const { 
        Swig::Director::swig_up = true; 
      }
#endif

      /* acquire ownership of the wrapped python object (the sense of "disown"
       * is from python) */
      void swig_disown() const { 
        if (!swig_disown_flag) { 
          swig_disown_flag=true;
          swig_incref(); 
        } 
      }

      /* increase the reference count of the wrapped python object */
      void swig_incref() const { 
        if (swig_disown_flag) {
          Py_INCREF(swig_self); 
        }
      }

      /* methods to implement pseudo protected director members */
      virtual bool swig_get_inner(const char* name) const {
        return true;
      }

      virtual void swig_set_inner(const char* name, bool val) const {
      }
  };

  bool Swig::Director::swig_up = false;

#ifdef __PTHREAD__
  MUTEX_INIT(Swig::Director::swig_mutex_up);
  pthread_t Swig::Director::swig_mutex_thread;
  bool Swig::Director::swig_mutex_active = false;
#endif

}

#endif /* __cplusplus */




/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "tst_wrap.h"

SwigDirector_BaseTST::SwigDirector_BaseTST(PyObject *self, FILE *file, serializer<PyObject * > *reader, bool disown): tst<PyObject * >(file, reader), Swig::Director(self, disown) {
    
}



SwigDirector_BaseTST::SwigDirector_BaseTST(PyObject *self, int initial_size, PyObject *default_value, bool disown): tst<PyObject * >(initial_size, default_value), Swig::Director(self, disown) {
    
}



void SwigDirector_BaseTST::put(char *string, PyObject *data) {
    PyObject *result;
    
    if (swig_get_up()) {
        tst<PyObject * >::put(string,data);
        return;
    }
    result = PyObject_CallMethod(swig_get_self(), "put", "sO" ,string,data);
    Py_XDECREF(result);
}


SwigDirector_Action::SwigDirector_Action(PyObject* self, bool disown) : Swig::Director(self, disown) {
    
}



void SwigDirector_Action::perform(char *key, int remaining_distance, PyObject *data) {
    PyObject *result;
    
    if (swig_get_up()) {
        throw Swig::DirectorPureVirtualException();
    }
    result = PyObject_CallMethod(swig_get_self(), "perform", "siO" ,key,remaining_distance,data);
    Py_XDECREF(result);
}


PyObject * SwigDirector_Action::result() {
    PyObject *c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        throw Swig::DirectorPureVirtualException();
    }
    result = PyObject_CallMethod(swig_get_self(), "result", NULL);
    c_result = (PyObject *) (result);
    if (PyErr_Occurred()) throw Swig::DirectorTypeMismatchException("Error converting Python object using ");
    Py_XDECREF(result);
    return c_result;
}


SwigDirector_Filter::SwigDirector_Filter(PyObject* self, bool disown) : Swig::Director(self, disown) {
    
}



PyObject * SwigDirector_Filter::perform(char *key, int remaining_distance, PyObject *data) {
    PyObject *c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        throw Swig::DirectorPureVirtualException();
    }
    result = PyObject_CallMethod(swig_get_self(), "perform", "siO" ,key,remaining_distance,data);
    c_result = (PyObject *) (result);
    if (PyErr_Occurred()) throw Swig::DirectorTypeMismatchException("Error converting Python object using ");
    Py_XDECREF(result);
    return c_result;
}


SwigDirector_Serializer::SwigDirector_Serializer(PyObject* self, bool disown) : Swig::Director(self, disown) {
    
}



void SwigDirector_Serializer::write(FILE *file, PyObject *data) {
    PyObject * obj0 = 0 ;
    PyObject *result;
    
    if (swig_get_up()) {
        throw Swig::DirectorPureVirtualException();
    }
    obj0 = SWIG_NewPointerObj(file, SWIGTYPE_p_FILE, 0);
    result = PyObject_CallMethod(swig_get_self(), "write", "OO" ,obj0,data);
    Py_XDECREF(result);
}


PyObject * SwigDirector_Serializer::read(FILE *file) {
    PyObject * obj0 = 0 ;
    PyObject *c_result ;
    PyObject *result;
    
    if (swig_get_up()) {
        throw Swig::DirectorPureVirtualException();
    }
    obj0 = SWIG_NewPointerObj(file, SWIGTYPE_p_FILE, 0);
    result = PyObject_CallMethod(swig_get_self(), "read", "O" ,obj0);
    c_result = (PyObject *) (result);
    if (PyErr_Occurred()) throw Swig::DirectorTypeMismatchException("Error converting Python object using ");
    Py_XDECREF(result);
    return c_result;
}


#ifdef __cplusplus
extern "C" {
#endif
static PyObject *_wrap_new_BaseTST__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PyObject *arg1 = (PyObject *) 0 ;
    FILE *arg2 = (FILE *) 0 ;
    serializer<PyObject * > *arg3 = (serializer<PyObject * > *) 0 ;
    tst<PyObject * > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_BaseTST",&obj0,&obj1,&obj2)) goto fail;
    arg1 = obj0;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_FILE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_serializerTPyObject_p_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            if ( arg1 != Py_None ) {
                /* subclassed */
                result = (tst<PyObject * > *)new SwigDirector_BaseTST(arg1,arg2,arg3,false);
                
            } else {
                result = (tst<PyObject * > *)new tst<PyObject * >(arg2,arg3);
                
            }
        }
        catch (TSTException e) {
            PyErr_SetString(PyExc_RuntimeError,e.message); SWIG_fail;
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_tstTPyObject_p_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_BaseTST__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PyObject *arg1 = (PyObject *) 0 ;
    int arg2 ;
    PyObject *arg3 = (PyObject *) 0 ;
    tst<PyObject * > *result;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OiO:new_BaseTST",&obj0,&arg2,&obj2)) goto fail;
    arg1 = obj0;
    arg3 = obj2;
    {
        try {
            if ( arg1 != Py_None ) {
                /* subclassed */
                result = (tst<PyObject * > *)new SwigDirector_BaseTST(arg1,arg2,arg3,false);
                
            } else {
                result = (tst<PyObject * > *)new tst<PyObject * >(arg2,arg3);
                
            }
        }
        catch (TSTException e) {
            PyErr_SetString(PyExc_RuntimeError,e.message); SWIG_fail;
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_tstTPyObject_p_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_BaseTST(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            _v = (argv[0] != 0);
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_FILE, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_serializerTPyObject_p_t, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_new_BaseTST__SWIG_0(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            _v = (argv[0] != 0);
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (argv[2] != 0);
                }
                if (_v) {
                    return _wrap_new_BaseTST__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_BaseTST'");
    return NULL;
}


static PyObject *_wrap_delete_BaseTST(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    tst<PyObject * > *arg1 = (tst<PyObject * > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_BaseTST",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_tstTPyObject_p_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            delete arg1;
        }
        catch (TSTException e) {
            PyErr_SetString(PyExc_RuntimeError,e.message); SWIG_fail;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BaseTST_adjust(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    tst<PyObject * > *arg1 = (tst<PyObject * > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:BaseTST_adjust",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_tstTPyObject_p_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            (arg1)->adjust();
        }
        catch (TSTException e) {
            PyErr_SetString(PyExc_RuntimeError,e.message); SWIG_fail;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BaseTST_walk(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    tst<PyObject * > *arg1 = (tst<PyObject * > *) 0 ;
    filter<PyObject * > *arg2 = (filter<PyObject * > *) 0 ;
    action<PyObject * > *arg3 = (action<PyObject * > *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:BaseTST_walk",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_tstTPyObject_p_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_filterTPyObject_p_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_actionTPyObject_p_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (PyObject *)(arg1)->walk(arg2,arg3);
        }
        catch (TSTException e) {
            PyErr_SetString(PyExc_RuntimeError,e.message); SWIG_fail;
        }
    }
    {
        Py_INCREF(result);
        resultobj = result;
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BaseTST_almost(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    tst<PyObject * > *arg1 = (tst<PyObject * > *) 0 ;
    char *arg2 ;
    int arg3 ;
    int arg4 ;
    filter<PyObject * > *arg5 = (filter<PyObject * > *) 0 ;
    action<PyObject * > *arg6 = (action<PyObject * > *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOiOO:BaseTST_almost",&obj0,&obj1,&arg4,&obj3,&obj4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_tstTPyObject_p_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = (char *) PyString_AsString(obj1);
        arg3 = (int) PyString_Size(obj1);
    }
    if ((SWIG_ConvertPtr(obj3,(void **) &arg5, SWIGTYPE_p_filterTPyObject_p_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj4,(void **) &arg6, SWIGTYPE_p_actionTPyObject_p_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (PyObject *)(arg1)->almost(arg2,arg3,arg4,arg5,arg6);
        }
        catch (TSTException e) {
            PyErr_SetString(PyExc_RuntimeError,e.message); SWIG_fail;
        }
    }
    {
        Py_INCREF(result);
        resultobj = result;
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BaseTST_common_prefix(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    tst<PyObject * > *arg1 = (tst<PyObject * > *) 0 ;
    char *arg2 ;
    filter<PyObject * > *arg3 = (filter<PyObject * > *) 0 ;
    action<PyObject * > *arg4 = (action<PyObject * > *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OsOO:BaseTST_common_prefix",&obj0,&arg2,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_tstTPyObject_p_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_filterTPyObject_p_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj3,(void **) &arg4, SWIGTYPE_p_actionTPyObject_p_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (PyObject *)(arg1)->common_prefix(arg2,arg3,arg4);
        }
        catch (TSTException e) {
            PyErr_SetString(PyExc_RuntimeError,e.message); SWIG_fail;
        }
    }
    {
        Py_INCREF(result);
        resultobj = result;
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BaseTST_scan(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    tst<PyObject * > *arg1 = (tst<PyObject * > *) 0 ;
    char *arg2 ;
    action<PyObject * > *arg3 = (action<PyObject * > *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OsO:BaseTST_scan",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_tstTPyObject_p_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_actionTPyObject_p_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (PyObject *)(arg1)->scan(arg2,arg3);
        }
        catch (TSTException e) {
            PyErr_SetString(PyExc_RuntimeError,e.message); SWIG_fail;
        }
    }
    {
        Py_INCREF(result);
        resultobj = result;
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BaseTST_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    tst<PyObject * > *arg1 = (tst<PyObject * > *) 0 ;
    char *arg2 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:BaseTST_get",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_tstTPyObject_p_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (PyObject *)(arg1)->get(arg2);
        }
        catch (TSTException e) {
            PyErr_SetString(PyExc_RuntimeError,e.message); SWIG_fail;
        }
    }
    {
        Py_INCREF(result);
        resultobj = result;
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BaseTST_put(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    tst<PyObject * > *arg1 = (tst<PyObject * > *) 0 ;
    char *arg2 ;
    PyObject *arg3 = (PyObject *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OsO:BaseTST_put",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_tstTPyObject_p_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg3 = obj2;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    {
        try {
            (arg1)->put(arg2,arg3);
        }
        catch (TSTException e) {
            PyErr_SetString(PyExc_RuntimeError,e.message); SWIG_fail;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BaseTST_get_maximum_key_length(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    tst<PyObject * > *arg1 = (tst<PyObject * > *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:BaseTST_get_maximum_key_length",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_tstTPyObject_p_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (int)(arg1)->get_maximum_key_length();
        }
        catch (TSTException e) {
            PyErr_SetString(PyExc_RuntimeError,e.message); SWIG_fail;
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BaseTST_bytes_allocated(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    tst<PyObject * > *arg1 = (tst<PyObject * > *) 0 ;
    size_t result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:BaseTST_bytes_allocated",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_tstTPyObject_p_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (arg1)->bytes_allocated();
        }
        catch (TSTException e) {
            PyErr_SetString(PyExc_RuntimeError,e.message); SWIG_fail;
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BaseTST_write(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    tst<PyObject * > *arg1 = (tst<PyObject * > *) 0 ;
    FILE *arg2 = (FILE *) 0 ;
    serializer<PyObject * > *arg3 = (serializer<PyObject * > *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:BaseTST_write",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_tstTPyObject_p_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_FILE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_serializerTPyObject_p_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            (arg1)->write(arg2,arg3);
        }
        catch (TSTException e) {
            PyErr_SetString(PyExc_RuntimeError,e.message); SWIG_fail;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_disown_BaseTST(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    tst<PyObject * > *arg1 = (tst<PyObject * > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:disown_BaseTST",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_tstTPyObject_p_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Swig::Director *director = dynamic_cast<Swig::Director *>(arg1);
        if (director) director->swig_disown();
    }
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * BaseTST_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_tstTPyObject_p_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_Action(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    action<PyObject * > *arg1 = (action<PyObject * > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Action",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_actionTPyObject_p_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            delete arg1;
        }
        catch (TSTException e) {
            PyErr_SetString(PyExc_RuntimeError,e.message); SWIG_fail;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Action_perform(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    action<PyObject * > *arg1 = (action<PyObject * > *) 0 ;
    char *arg2 ;
    int arg3 ;
    PyObject *arg4 = (PyObject *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj3 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OsiO:Action_perform",&obj0,&arg2,&arg3,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_actionTPyObject_p_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg4 = obj3;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    {
        try {
            (arg1)->perform(arg2,arg3,arg4);
        }
        catch (TSTException e) {
            PyErr_SetString(PyExc_RuntimeError,e.message); SWIG_fail;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Action_result(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    action<PyObject * > *arg1 = (action<PyObject * > *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Action_result",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_actionTPyObject_p_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    {
        try {
            result = (PyObject *)(arg1)->result();
        }
        catch (TSTException e) {
            PyErr_SetString(PyExc_RuntimeError,e.message); SWIG_fail;
        }
    }
    {
        Py_INCREF(result);
        resultobj = result;
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Action(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PyObject *arg1 = (PyObject *) 0 ;
    action<PyObject * > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_Action",&obj0)) goto fail;
    arg1 = obj0;
    {
        try {
            result = (action<PyObject * > *)new SwigDirector_Action(arg1);
        }
        catch (TSTException e) {
            PyErr_SetString(PyExc_RuntimeError,e.message); SWIG_fail;
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_actionTPyObject_p_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_disown_Action(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    action<PyObject * > *arg1 = (action<PyObject * > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:disown_Action",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_actionTPyObject_p_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Swig::Director *director = dynamic_cast<Swig::Director *>(arg1);
        if (director) director->swig_disown();
    }
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Action_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_actionTPyObject_p_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_Filter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    filter<PyObject * > *arg1 = (filter<PyObject * > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Filter",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_filterTPyObject_p_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            delete arg1;
        }
        catch (TSTException e) {
            PyErr_SetString(PyExc_RuntimeError,e.message); SWIG_fail;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Filter_perform(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    filter<PyObject * > *arg1 = (filter<PyObject * > *) 0 ;
    char *arg2 ;
    int arg3 ;
    PyObject *arg4 = (PyObject *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    PyObject * obj3 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OsiO:Filter_perform",&obj0,&arg2,&arg3,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_filterTPyObject_p_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg4 = obj3;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    {
        try {
            result = (PyObject *)(arg1)->perform(arg2,arg3,arg4);
        }
        catch (TSTException e) {
            PyErr_SetString(PyExc_RuntimeError,e.message); SWIG_fail;
        }
    }
    {
        Py_INCREF(result);
        resultobj = result;
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Filter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PyObject *arg1 = (PyObject *) 0 ;
    filter<PyObject * > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_Filter",&obj0)) goto fail;
    arg1 = obj0;
    {
        try {
            result = (filter<PyObject * > *)new SwigDirector_Filter(arg1);
        }
        catch (TSTException e) {
            PyErr_SetString(PyExc_RuntimeError,e.message); SWIG_fail;
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_filterTPyObject_p_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_disown_Filter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    filter<PyObject * > *arg1 = (filter<PyObject * > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:disown_Filter",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_filterTPyObject_p_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Swig::Director *director = dynamic_cast<Swig::Director *>(arg1);
        if (director) director->swig_disown();
    }
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Filter_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_filterTPyObject_p_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_Serializer(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    serializer<PyObject * > *arg1 = (serializer<PyObject * > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Serializer",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_serializerTPyObject_p_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            delete arg1;
        }
        catch (TSTException e) {
            PyErr_SetString(PyExc_RuntimeError,e.message); SWIG_fail;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Serializer_write(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    serializer<PyObject * > *arg1 = (serializer<PyObject * > *) 0 ;
    FILE *arg2 = (FILE *) 0 ;
    PyObject *arg3 = (PyObject *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Serializer_write",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_serializerTPyObject_p_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_FILE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg3 = obj2;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    {
        try {
            (arg1)->write(arg2,arg3);
        }
        catch (TSTException e) {
            PyErr_SetString(PyExc_RuntimeError,e.message); SWIG_fail;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Serializer_read(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    serializer<PyObject * > *arg1 = (serializer<PyObject * > *) 0 ;
    FILE *arg2 = (FILE *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Serializer_read",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_serializerTPyObject_p_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_FILE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    {
        try {
            result = (PyObject *)(arg1)->read(arg2);
        }
        catch (TSTException e) {
            PyErr_SetString(PyExc_RuntimeError,e.message); SWIG_fail;
        }
    }
    {
        Py_INCREF(result);
        resultobj = result;
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Serializer(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PyObject *arg1 = (PyObject *) 0 ;
    serializer<PyObject * > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_Serializer",&obj0)) goto fail;
    arg1 = obj0;
    {
        try {
            result = (serializer<PyObject * > *)new SwigDirector_Serializer(arg1);
        }
        catch (TSTException e) {
            PyErr_SetString(PyExc_RuntimeError,e.message); SWIG_fail;
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_serializerTPyObject_p_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_disown_Serializer(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    serializer<PyObject * > *arg1 = (serializer<PyObject * > *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:disown_Serializer",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_serializerTPyObject_p_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Swig::Director *director = dynamic_cast<Swig::Director *>(arg1);
        if (director) director->swig_disown();
    }
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Serializer_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_serializerTPyObject_p_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_TSTException(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    TSTException *result;
    
    if(!PyArg_ParseTuple(args,(char *)"s:new_TSTException",&arg1)) goto fail;
    {
        try {
            result = (TSTException *)new TSTException(arg1);
        }
        catch (TSTException e) {
            PyErr_SetString(PyExc_RuntimeError,e.message); SWIG_fail;
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_TSTException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TSTException_message_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TSTException *arg1 = (TSTException *) 0 ;
    char *arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:TSTException_message_set",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TSTException,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (arg1->message) delete [] arg1->message;
        if (arg2) {
            arg1->message = (char *) (new char[strlen(arg2)+1]);
            strcpy((char *) arg1->message,arg2);
        } else {
            arg1->message = 0;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TSTException_message_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TSTException *arg1 = (TSTException *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TSTException_message_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TSTException,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (char *) ((arg1)->message);
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_TSTException(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TSTException *arg1 = (TSTException *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_TSTException",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TSTException,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            delete arg1;
        }
        catch (TSTException e) {
            PyErr_SetString(PyExc_RuntimeError,e.message); SWIG_fail;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * TSTException_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_TSTException, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_CallableAction(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PyObject *arg1 = (PyObject *) 0 ;
    CallableAction *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_CallableAction",&obj0)) goto fail;
    arg1 = obj0;
    {
        try {
            result = (CallableAction *)new CallableAction(arg1);
        }
        catch (TSTException e) {
            PyErr_SetString(PyExc_RuntimeError,e.message); SWIG_fail;
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_CallableAction, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CallableAction(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    CallableAction *arg1 = (CallableAction *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CallableAction",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_CallableAction,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            delete arg1;
        }
        catch (TSTException e) {
            PyErr_SetString(PyExc_RuntimeError,e.message); SWIG_fail;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CallableAction_perform(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    CallableAction *arg1 = (CallableAction *) 0 ;
    char *arg2 ;
    int arg3 ;
    PyObject *arg4 = (PyObject *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj3 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OsiO:CallableAction_perform",&obj0,&arg2,&arg3,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_CallableAction,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg4 = obj3;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    {
        try {
            (arg1)->perform(arg2,arg3,arg4);
        }
        catch (TSTException e) {
            PyErr_SetString(PyExc_RuntimeError,e.message); SWIG_fail;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CallableAction_result(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    CallableAction *arg1 = (CallableAction *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CallableAction_result",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_CallableAction,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    {
        try {
            result = (PyObject *)(arg1)->result();
        }
        catch (TSTException e) {
            PyErr_SetString(PyExc_RuntimeError,e.message); SWIG_fail;
        }
    }
    {
        Py_INCREF(result);
        resultobj = result;
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CallableAction_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CallableAction, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_CallableFilter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PyObject *arg1 = (PyObject *) 0 ;
    CallableFilter *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_CallableFilter",&obj0)) goto fail;
    arg1 = obj0;
    {
        try {
            result = (CallableFilter *)new CallableFilter(arg1);
        }
        catch (TSTException e) {
            PyErr_SetString(PyExc_RuntimeError,e.message); SWIG_fail;
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_CallableFilter, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CallableFilter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    CallableFilter *arg1 = (CallableFilter *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CallableFilter",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_CallableFilter,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            delete arg1;
        }
        catch (TSTException e) {
            PyErr_SetString(PyExc_RuntimeError,e.message); SWIG_fail;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CallableFilter_perform(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    CallableFilter *arg1 = (CallableFilter *) 0 ;
    char *arg2 ;
    int arg3 ;
    PyObject *arg4 = (PyObject *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    PyObject * obj3 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OsiO:CallableFilter_perform",&obj0,&arg2,&arg3,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_CallableFilter,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg4 = obj3;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    {
        try {
            result = (PyObject *)(arg1)->perform(arg2,arg3,arg4);
        }
        catch (TSTException e) {
            PyErr_SetString(PyExc_RuntimeError,e.message); SWIG_fail;
        }
    }
    {
        Py_INCREF(result);
        resultobj = result;
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CallableFilter_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CallableFilter, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_DictAction(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DictAction *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_DictAction")) goto fail;
    {
        try {
            result = (DictAction *)new DictAction();
        }
        catch (TSTException e) {
            PyErr_SetString(PyExc_RuntimeError,e.message); SWIG_fail;
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_DictAction, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_DictAction(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DictAction *arg1 = (DictAction *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_DictAction",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DictAction,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            delete arg1;
        }
        catch (TSTException e) {
            PyErr_SetString(PyExc_RuntimeError,e.message); SWIG_fail;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DictAction_perform(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DictAction *arg1 = (DictAction *) 0 ;
    char *arg2 ;
    int arg3 ;
    PyObject *arg4 = (PyObject *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj3 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OsiO:DictAction_perform",&obj0,&arg2,&arg3,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DictAction,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg4 = obj3;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    {
        try {
            (arg1)->perform(arg2,arg3,arg4);
        }
        catch (TSTException e) {
            PyErr_SetString(PyExc_RuntimeError,e.message); SWIG_fail;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DictAction_result(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DictAction *arg1 = (DictAction *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DictAction_result",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DictAction,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    {
        try {
            result = (PyObject *)(arg1)->result();
        }
        catch (TSTException e) {
            PyErr_SetString(PyExc_RuntimeError,e.message); SWIG_fail;
        }
    }
    {
        Py_INCREF(result);
        resultobj = result;
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * DictAction_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_DictAction, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_ListAction(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ListAction *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_ListAction")) goto fail;
    {
        try {
            result = (ListAction *)new ListAction();
        }
        catch (TSTException e) {
            PyErr_SetString(PyExc_RuntimeError,e.message); SWIG_fail;
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ListAction, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_ListAction(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ListAction *arg1 = (ListAction *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_ListAction",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ListAction,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            delete arg1;
        }
        catch (TSTException e) {
            PyErr_SetString(PyExc_RuntimeError,e.message); SWIG_fail;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ListAction_perform(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ListAction *arg1 = (ListAction *) 0 ;
    char *arg2 ;
    int arg3 ;
    PyObject *arg4 = (PyObject *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj3 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OsiO:ListAction_perform",&obj0,&arg2,&arg3,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ListAction,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg4 = obj3;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    {
        try {
            (arg1)->perform(arg2,arg3,arg4);
        }
        catch (TSTException e) {
            PyErr_SetString(PyExc_RuntimeError,e.message); SWIG_fail;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ListAction_result(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ListAction *arg1 = (ListAction *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ListAction_result",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ListAction,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    {
        try {
            result = (PyObject *)(arg1)->result();
        }
        catch (TSTException e) {
            PyErr_SetString(PyExc_RuntimeError,e.message); SWIG_fail;
        }
    }
    {
        Py_INCREF(result);
        resultobj = result;
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ListAction_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_ListAction, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_ObjectSerializer(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ObjectSerializer *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_ObjectSerializer")) goto fail;
    {
        try {
            result = (ObjectSerializer *)new ObjectSerializer();
        }
        catch (TSTException e) {
            PyErr_SetString(PyExc_RuntimeError,e.message); SWIG_fail;
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ObjectSerializer, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_ObjectSerializer(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ObjectSerializer *arg1 = (ObjectSerializer *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_ObjectSerializer",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ObjectSerializer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            delete arg1;
        }
        catch (TSTException e) {
            PyErr_SetString(PyExc_RuntimeError,e.message); SWIG_fail;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ObjectSerializer_write(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ObjectSerializer *arg1 = (ObjectSerializer *) 0 ;
    FILE *arg2 = (FILE *) 0 ;
    PyObject *arg3 = (PyObject *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:ObjectSerializer_write",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ObjectSerializer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_FILE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg3 = obj2;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    {
        try {
            (arg1)->write(arg2,arg3);
        }
        catch (TSTException e) {
            PyErr_SetString(PyExc_RuntimeError,e.message); SWIG_fail;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ObjectSerializer_read(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ObjectSerializer *arg1 = (ObjectSerializer *) 0 ;
    FILE *arg2 = (FILE *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    Swig::Director *director = 0;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ObjectSerializer_read",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ObjectSerializer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_FILE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    director = dynamic_cast<Swig::Director *>(arg1);
    if (director && (director->swig_get_self()==obj0)) director->swig_set_up();
    {
        try {
            result = (PyObject *)(arg1)->read(arg2);
        }
        catch (TSTException e) {
            PyErr_SetString(PyExc_RuntimeError,e.message); SWIG_fail;
        }
    }
    {
        Py_INCREF(result);
        resultobj = result;
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ObjectSerializer_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_ObjectSerializer, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_TST__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TST *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_TST")) goto fail;
    {
        try {
            result = (TST *)new TST();
        }
        catch (TSTException e) {
            PyErr_SetString(PyExc_RuntimeError,e.message); SWIG_fail;
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_TST, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_TST__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PyObject *arg1 = (PyObject *) 0 ;
    TST *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_TST",&obj0)) goto fail;
    arg1 = obj0;
    {
        try {
            result = (TST *)new TST(arg1);
        }
        catch (TSTException e) {
            PyErr_SetString(PyExc_RuntimeError,e.message); SWIG_fail;
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_TST, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_TST__SWIG_2(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    PyObject *arg2 = (PyObject *) 0 ;
    TST *result;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"iO:new_TST",&arg1,&obj1)) goto fail;
    arg2 = obj1;
    {
        try {
            result = (TST *)new TST(arg1,arg2);
        }
        catch (TSTException e) {
            PyErr_SetString(PyExc_RuntimeError,e.message); SWIG_fail;
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_TST, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_TST(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_TST__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            _v = (argv[0] != 0);
        }
        if (_v) {
            return _wrap_new_TST__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (argv[1] != 0);
            }
            if (_v) {
                return _wrap_new_TST__SWIG_2(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_TST'");
    return NULL;
}


static PyObject *_wrap_delete_TST(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TST *arg1 = (TST *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_TST",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TST,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            delete arg1;
        }
        catch (TSTException e) {
            PyErr_SetString(PyExc_RuntimeError,e.message); SWIG_fail;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TST_write(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TST *arg1 = (TST *) 0 ;
    PyObject *arg2 = (PyObject *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:TST_write",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TST,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = obj1;
    {
        try {
            result = (PyObject *)(arg1)->write(arg2);
        }
        catch (TSTException e) {
            PyErr_SetString(PyExc_RuntimeError,e.message); SWIG_fail;
        }
    }
    {
        Py_INCREF(result);
        resultobj = result;
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TST___getitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TST *arg1 = (TST *) 0 ;
    char *arg2 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:TST___getitem__",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TST,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (PyObject *)(arg1)->__getitem__(arg2);
        }
        catch (TSTException e) {
            PyErr_SetString(PyExc_RuntimeError,e.message); SWIG_fail;
        }
    }
    {
        Py_INCREF(result);
        resultobj = result;
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TST___setitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TST *arg1 = (TST *) 0 ;
    char *arg2 ;
    PyObject *arg3 = (PyObject *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OsO:TST___setitem__",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TST,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg3 = obj2;
    {
        try {
            (arg1)->__setitem__(arg2,arg3);
        }
        catch (TSTException e) {
            PyErr_SetString(PyExc_RuntimeError,e.message); SWIG_fail;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * TST_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_TST, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyMethodDef SwigMethods[] = {
	 { (char *)"new_BaseTST", _wrap_new_BaseTST, METH_VARARGS },
	 { (char *)"delete_BaseTST", _wrap_delete_BaseTST, METH_VARARGS },
	 { (char *)"BaseTST_adjust", _wrap_BaseTST_adjust, METH_VARARGS },
	 { (char *)"BaseTST_walk", _wrap_BaseTST_walk, METH_VARARGS },
	 { (char *)"BaseTST_almost", _wrap_BaseTST_almost, METH_VARARGS },
	 { (char *)"BaseTST_common_prefix", _wrap_BaseTST_common_prefix, METH_VARARGS },
	 { (char *)"BaseTST_scan", _wrap_BaseTST_scan, METH_VARARGS },
	 { (char *)"BaseTST_get", _wrap_BaseTST_get, METH_VARARGS },
	 { (char *)"BaseTST_put", _wrap_BaseTST_put, METH_VARARGS },
	 { (char *)"BaseTST_get_maximum_key_length", _wrap_BaseTST_get_maximum_key_length, METH_VARARGS },
	 { (char *)"BaseTST_bytes_allocated", _wrap_BaseTST_bytes_allocated, METH_VARARGS },
	 { (char *)"BaseTST_write", _wrap_BaseTST_write, METH_VARARGS },
	 { (char *)"disown_BaseTST", _wrap_disown_BaseTST, METH_VARARGS },
	 { (char *)"BaseTST_swigregister", BaseTST_swigregister, METH_VARARGS },
	 { (char *)"delete_Action", _wrap_delete_Action, METH_VARARGS },
	 { (char *)"Action_perform", _wrap_Action_perform, METH_VARARGS },
	 { (char *)"Action_result", _wrap_Action_result, METH_VARARGS },
	 { (char *)"new_Action", _wrap_new_Action, METH_VARARGS },
	 { (char *)"disown_Action", _wrap_disown_Action, METH_VARARGS },
	 { (char *)"Action_swigregister", Action_swigregister, METH_VARARGS },
	 { (char *)"delete_Filter", _wrap_delete_Filter, METH_VARARGS },
	 { (char *)"Filter_perform", _wrap_Filter_perform, METH_VARARGS },
	 { (char *)"new_Filter", _wrap_new_Filter, METH_VARARGS },
	 { (char *)"disown_Filter", _wrap_disown_Filter, METH_VARARGS },
	 { (char *)"Filter_swigregister", Filter_swigregister, METH_VARARGS },
	 { (char *)"delete_Serializer", _wrap_delete_Serializer, METH_VARARGS },
	 { (char *)"Serializer_write", _wrap_Serializer_write, METH_VARARGS },
	 { (char *)"Serializer_read", _wrap_Serializer_read, METH_VARARGS },
	 { (char *)"new_Serializer", _wrap_new_Serializer, METH_VARARGS },
	 { (char *)"disown_Serializer", _wrap_disown_Serializer, METH_VARARGS },
	 { (char *)"Serializer_swigregister", Serializer_swigregister, METH_VARARGS },
	 { (char *)"new_TSTException", _wrap_new_TSTException, METH_VARARGS },
	 { (char *)"TSTException_message_set", _wrap_TSTException_message_set, METH_VARARGS },
	 { (char *)"TSTException_message_get", _wrap_TSTException_message_get, METH_VARARGS },
	 { (char *)"delete_TSTException", _wrap_delete_TSTException, METH_VARARGS },
	 { (char *)"TSTException_swigregister", TSTException_swigregister, METH_VARARGS },
	 { (char *)"new_CallableAction", _wrap_new_CallableAction, METH_VARARGS },
	 { (char *)"delete_CallableAction", _wrap_delete_CallableAction, METH_VARARGS },
	 { (char *)"CallableAction_perform", _wrap_CallableAction_perform, METH_VARARGS },
	 { (char *)"CallableAction_result", _wrap_CallableAction_result, METH_VARARGS },
	 { (char *)"CallableAction_swigregister", CallableAction_swigregister, METH_VARARGS },
	 { (char *)"new_CallableFilter", _wrap_new_CallableFilter, METH_VARARGS },
	 { (char *)"delete_CallableFilter", _wrap_delete_CallableFilter, METH_VARARGS },
	 { (char *)"CallableFilter_perform", _wrap_CallableFilter_perform, METH_VARARGS },
	 { (char *)"CallableFilter_swigregister", CallableFilter_swigregister, METH_VARARGS },
	 { (char *)"new_DictAction", _wrap_new_DictAction, METH_VARARGS },
	 { (char *)"delete_DictAction", _wrap_delete_DictAction, METH_VARARGS },
	 { (char *)"DictAction_perform", _wrap_DictAction_perform, METH_VARARGS },
	 { (char *)"DictAction_result", _wrap_DictAction_result, METH_VARARGS },
	 { (char *)"DictAction_swigregister", DictAction_swigregister, METH_VARARGS },
	 { (char *)"new_ListAction", _wrap_new_ListAction, METH_VARARGS },
	 { (char *)"delete_ListAction", _wrap_delete_ListAction, METH_VARARGS },
	 { (char *)"ListAction_perform", _wrap_ListAction_perform, METH_VARARGS },
	 { (char *)"ListAction_result", _wrap_ListAction_result, METH_VARARGS },
	 { (char *)"ListAction_swigregister", ListAction_swigregister, METH_VARARGS },
	 { (char *)"new_ObjectSerializer", _wrap_new_ObjectSerializer, METH_VARARGS },
	 { (char *)"delete_ObjectSerializer", _wrap_delete_ObjectSerializer, METH_VARARGS },
	 { (char *)"ObjectSerializer_write", _wrap_ObjectSerializer_write, METH_VARARGS },
	 { (char *)"ObjectSerializer_read", _wrap_ObjectSerializer_read, METH_VARARGS },
	 { (char *)"ObjectSerializer_swigregister", ObjectSerializer_swigregister, METH_VARARGS },
	 { (char *)"new_TST", _wrap_new_TST, METH_VARARGS },
	 { (char *)"delete_TST", _wrap_delete_TST, METH_VARARGS },
	 { (char *)"TST_write", _wrap_TST_write, METH_VARARGS },
	 { (char *)"TST___getitem__", _wrap_TST___getitem__, METH_VARARGS },
	 { (char *)"TST___setitem__", _wrap_TST___setitem__, METH_VARARGS },
	 { (char *)"TST_swigregister", TST_swigregister, METH_VARARGS },
	 { NULL, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_DictActionTo_p_actionTPyObject_p_t(void *x) {
    return (void *)((action<PyObject * > *)  ((DictAction *) x));
}
static void *_p_ListActionTo_p_actionTPyObject_p_t(void *x) {
    return (void *)((action<PyObject * > *)  ((ListAction *) x));
}
static void *_p_CallableActionTo_p_actionTPyObject_p_t(void *x) {
    return (void *)((action<PyObject * > *)  ((CallableAction *) x));
}
static void *_p_CallableFilterTo_p_filterTPyObject_p_t(void *x) {
    return (void *)((filter<PyObject * > *)  ((CallableFilter *) x));
}
static void *_p_ObjectSerializerTo_p_serializerTPyObject_p_t(void *x) {
    return (void *)((serializer<PyObject * > *)  ((ObjectSerializer *) x));
}
static void *_p_TSTTo_p_tstTPyObject_p_t(void *x) {
    return (void *)((tst<PyObject * > *)  ((TST *) x));
}
static swig_type_info _swigt__p_FILE[] = {{"_p_FILE", 0, "FILE *", 0},{"_p_FILE"},{0}};
static swig_type_info _swigt__p_TSTException[] = {{"_p_TSTException", 0, "TSTException *", 0},{"_p_TSTException"},{0}};
static swig_type_info _swigt__p_CallableFilter[] = {{"_p_CallableFilter", 0, "CallableFilter *", 0},{"_p_CallableFilter"},{0}};
static swig_type_info _swigt__p_actionTPyObject_p_t[] = {{"_p_actionTPyObject_p_t", 0, "action<PyObject * > *", 0},{"_p_actionTPyObject_p_t"},{"_p_DictAction", _p_DictActionTo_p_actionTPyObject_p_t},{"_p_ListAction", _p_ListActionTo_p_actionTPyObject_p_t},{"_p_CallableAction", _p_CallableActionTo_p_actionTPyObject_p_t},{0}};
static swig_type_info _swigt__p_filterTPyObject_p_t[] = {{"_p_filterTPyObject_p_t", 0, "filter<PyObject * > *", 0},{"_p_CallableFilter", _p_CallableFilterTo_p_filterTPyObject_p_t},{"_p_filterTPyObject_p_t"},{0}};
static swig_type_info _swigt__p_serializerTPyObject_p_t[] = {{"_p_serializerTPyObject_p_t", 0, "serializer<PyObject * > *", 0},{"_p_serializerTPyObject_p_t"},{"_p_ObjectSerializer", _p_ObjectSerializerTo_p_serializerTPyObject_p_t},{0}};
static swig_type_info _swigt__p_tstTPyObject_p_t[] = {{"_p_tstTPyObject_p_t", 0, "tst<PyObject * > *", 0},{"_p_tstTPyObject_p_t"},{"_p_TST", _p_TSTTo_p_tstTPyObject_p_t},{0}};
static swig_type_info _swigt__p_DictAction[] = {{"_p_DictAction", 0, "DictAction *", 0},{"_p_DictAction"},{0}};
static swig_type_info _swigt__p_ListAction[] = {{"_p_ListAction", 0, "ListAction *", 0},{"_p_ListAction"},{0}};
static swig_type_info _swigt__p_CallableAction[] = {{"_p_CallableAction", 0, "CallableAction *", 0},{"_p_CallableAction"},{0}};
static swig_type_info _swigt__p_ObjectSerializer[] = {{"_p_ObjectSerializer", 0, "ObjectSerializer *", 0},{"_p_ObjectSerializer"},{0}};
static swig_type_info _swigt__p_TST[] = {{"_p_TST", 0, "TST *", 0},{"_p_TST"},{0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_FILE, 
_swigt__p_TSTException, 
_swigt__p_CallableFilter, 
_swigt__p_actionTPyObject_p_t, 
_swigt__p_filterTPyObject_p_t, 
_swigt__p_serializerTPyObject_p_t, 
_swigt__p_tstTPyObject_p_t, 
_swigt__p_DictAction, 
_swigt__p_ListAction, 
_swigt__p_CallableAction, 
_swigt__p_ObjectSerializer, 
_swigt__p_TST, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0}};

#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT(void) SWIG_init(void) {
    static PyObject *SWIG_globals = 0; 
    static int       typeinit = 0;
    PyObject *m, *d;
    int       i;
    if (!SWIG_globals) SWIG_globals = SWIG_newvarlink();
    m = Py_InitModule((char *) SWIG_name, SwigMethods);
    d = PyModule_GetDict(m);
    
    if (!typeinit) {
        for (i = 0; swig_types_initial[i]; i++) {
            swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
        }
        typeinit = 1;
    }
    SWIG_InstallConstants(d,swig_const_table);
    
}

